import os
import asyncpg
import logging
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS quizzes (
            id SERIAL PRIMARY KEY,
            chat_id BIGINT,
            question TEXT,
            options TEXT,
            correct_answer TEXT
        )
    """)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            score INTEGER DEFAULT 0
        )
    """)
    await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@app.get("/")
async def root():
    return {"message": "Bot is running!"}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(Command("add_question"))
async def add_question(message: Message):
    chat_id = message.chat.id
    parts = message.text.split('|')
    
    if len(parts) != 3:
        await message.answer("–û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –≤–æ–ø—Ä–æ—Å|–≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é|–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return
    
    question, options, correct_answer = map(str.strip, parts)
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO quizzes (chat_id, question, options, correct_answer) VALUES ($1, $2, $3, $4)", 
                       chat_id, question, options, correct_answer)
    await conn.close()
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!")

# –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
@dp.message(Command("quiz"))
async def start_quiz(message: Message):
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT * FROM quizzes WHERE chat_id = $1 ORDER BY RANDOM() LIMIT 1", message.chat.id)
    await conn.close()
    
    if not row:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!")
        return
    
    options = row["options"].split(',')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"answer:{opt}|{row['correct_answer']}")]
        for opt in options
    ])
    await message.answer(row["question"], reply_markup=keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("answer:"))
async def check_answer(callback: types.CallbackQuery):
    user_answer, correct_answer = callback.data.split(":")[1].split("|")
    conn = await asyncpg.connect(DATABASE_URL)
    
    if user_answer == correct_answer:
        row = await conn.fetchrow("SELECT score FROM scores WHERE user_id = $1", callback.from_user.id)
        if row:
            new_score = row["score"] + 1
            await conn.execute("UPDATE scores SET score = $1 WHERE user_id = $2", new_score, callback.from_user.id)
        else:
            await conn.execute("INSERT INTO scores (user_id, username, score) VALUES ($1, $2, $3)", 
                               callback.from_user.id, callback.from_user.username, 1)
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª")
    else:
        await callback.message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    await conn.close()
    await callback.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á—ë—Ç–∞
@dp.message(Command("score"))
async def check_score(message: Message):
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT score FROM scores WHERE user_id = $1", message.from_user.id)
    await conn.close()
    
    if row:
        await message.answer(f"üèÜ –í–∞—à —Å—á—ë—Ç: {row['score']}")
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    await init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    await bot.set_webhook(WEBHOOK_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    uvicorn.run(app, host="0.0.0.0", port=8080)
